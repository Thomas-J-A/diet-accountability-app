# TODO: E2E tests (Docker)
# TODO: Add caching for npm dependencies
# TODO: Refactor duplicated setup code in each job

name: CI

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

jobs:
  # This works on entire repo
  lint_scan_project:
    name: üßπ Lint project and üîê scan for secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node environment
        uses: actions/setup-node@v3
        with:
          node-version: 19
          # cache: npm

      - name: Install root dependencies
        run: npm ci

      - name: Install server dependencies
        working-directory: ./apps/server
        run: npm ci

      - name: Generate types from GraphQL schema - server
        working-directory: ./apps/server
        run: npm run generate

      - name: Install client dependencies
        working-directory: ./apps/client
        run: npm ci

      - name: Generate types from GraphQL schema - client
        working-directory: ./apps/client
        run: npm run generate
        env:
          # In dev (Docker) schema fetched in an HTTP request but in CI can be a relative path
          GRAPHQL_SCHEMA: '../server/src/schema.graphql'

      - name: Lint and format project
        run: npm run lint

      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@4df650038e2eb9f7329218df929c2780866e61a3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_test_client:
    name: üèóÔ∏è Build and test client
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/client
    needs:
      - lint_scan_project
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node environment
        uses: actions/setup-node@v3
        with:
          node-version: 19
          # cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate types
        run: npm run generate
        env:
          GRAPHQL_SCHEMA: '../server/src/schema.graphql'

      - name: Build production bundle
        run: npm run build

      - name: Run unit tests
        run: npm run test

  build_test_server:
    name: üèóÔ∏è Build and test server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/server
    needs:
      - lint_scan_project
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node environment
        uses: actions/setup-node@v3
        with:
          node-version: 19
          # cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate types
        run: npm run generate

      - name: Compile TypeScript
        run: npm run build

      - name: Run integration tests
        run: npm run test
        env:
          NODE_ENV: test
          PORT: 3000
          MONGODB_URI: not_needed_but_must_be_defined
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          AWS_ACCESS_KEY_ID: foo
          AWS_SECRET_ACCESS_KEY: bar
          AWS_REGION: baz
          AWS_ROLE_ARN: qux
          AWS_BUCKET_NAME: fooagain
