"""
Custom scalar for Date values
"""
scalar Date

"""
Custom scalar for JSON values
"""
scalar JSON

"""
Top level queries
"""
type Query {
  """
  Retrieve a list of events (meals, stickers) for a specific day
  """
  dayEvents(dateRange: DayEventsInput!): [DayEvent!]!
  """
  Retrieve an array of presigned URLs to upload images to S3
  """
  presignedUrlsPost(fileData: [PresignedUrlsPostInput!]!): [PresignedPost!]!
  """
  Retrieve an array of presigned URLs to download images from S3
  """
  presignedUrlsGet(keys: [String!]!): [PresignedGet!]!
}

"""
Top level mutations
"""
type Mutation {
  """
  Sign up a new user
  """
  signUp(userData: SignUpInput!): SignUpPayload!
  """
  Sign in an existing user
  """
  signIn(credentials: SignInInput!): SignInPayload!
  """
  Delete an existing user
  """
  deleteUser(id: ID!): DeleteUserPayload!
  """
  Create a new meal entry
  """
  createMeal(mealData: CreateMealInput!): CreateMealPayload!
  """
  Update an existing meal entry
  """
  updateMeal(id: ID!, updatedMealData: UpdateMealInput!): UpdateMealPayload!
  """
  Add a healthy habit to the list of a day's events
  """
  addSticker(stickerData: AddStickerInput!): AddStickerPayload!
  """
  Remove a healthy habit from the list of a day's events
  """
  removeSticker(stickerData: RemoveStickerInput!): RemoveStickerPayload!
}

"""
A single day on which data is recorded
"""
type DayEvent {
  """
  The unique identifier for this day event
  """
  id: ID!
  """
  The date formatted as YYYY-MM-DD
  """
  date: Date!
  """
  A list of all healthy habits associated with this day
  """
  healthyHabits: [HealthyHabitEnum!]!
  """
  A list of meals consumed on this day
  """
  meals: [Meal!]!
}

"""
A representation of a meal, which can be breakfast, lunch, or dinner
"""
type Meal {
  id: ID!
  """
  A short description of the meal
  """
  description: String!
  """
  The location where the meal was consumed
  """
  location: LocationEnum!
  """
  A rating between 1 and 10 assigned to the meal
  """
  rating: Int!
  """
  The type of meal (breakfast, lunch, or dinner)
  """
  type: MealTypeEnum!
  """
  A list of keys referencing location in an S3 bucket of each photo associated with meal
  """
  photoKeys: [String!]!
}

"""
Possible healthy habits that can be associated with a day event
"""
enum HealthyHabitEnum {
  CARDIO
  RESISTANCE_TRAINING
  STUDY
  SLEEP
  MEDITATION
  WATER
  SOCIAL_ACTIVITY
  OFFLINE_MODE
}

"""
Possible locations where a meal can be consumed
"""
enum LocationEnum {
  HOME
  WORK
  RESTAURANT
  TRAVEL
  OUTDOORS
  OTHER
}

"""
Possible mealtimes that can be recorded
"""
enum MealTypeEnum {
  BREAKFAST
  LUNCH
  DINNER
}

"""
Input type for fetching day events
"""
input DayEventsInput {
  """
  The end date formatted as YYYY-MM-DD
  """
  endDate: Date!
  """
  The start date formatted as YYYY-MM-DD
  """
  startDate: Date!
}

"""
Input type for fetching POST presigned URLs
"""
input PresignedUrlsPostInput {
  """
  The name of the file to upload
  """
  filename: String!
  """
  The MIME type of the file to upload
  """
  contentType: String!
}

"""
Represents a single presigned URL for a POST request to S3
"""
type PresignedPost {
  """
  The S3 object key
  """
  key: String!
  """
  URL to make the S3 request to
  """
  url: String!
  """
  Key/value pairs needed for authentication when POSTing FormData to S3
  """
  fields: JSON!
}

"""
Represents a single presigned URL for a GET request to S3
"""
type PresignedGet {
  """
  The S3 object key
  """
  key: String!
  """
  A presigned URL for downloading from S3
  """
  url: String!
}

"""
Standard interface for all mutation responses
Operation-specific return data added per type
"""
interface Payload {
  """
  The status code of the response
  """
  code: Int!
  """
  Indicates whether the mutation was successful
  """
  success: Boolean!
  """
  Human-readable message for the UI
  """
  message: String!
}

"""
Represents authentication tokens a user must send to receive authenticated data
"""
type AuthTokens {
  """
  A JWT token used to authenticate a user and access protected resources
  """
  accessToken: String!
  #   """
  #   A JWT token used to refresh authentication and receive new access tokens
  #   """
  #   refreshToken: String!
}

"""
Represents a user entity
"""
type User {
  id: ID!
  """
  The first name of the user
  """
  firstName: String!
  """
  The last name of the user
  """
  lastName: String!
  """
  The unique email address associated with the user
  """
  email: String!
}

"""
Input type for registering a new user
"""
input SignUpInput {
  """
  The first name of the user
  """
  firstName: String!
  """
  The last name of the user
  """
  lastName: String!
  """
  The unique email address associated with the user
  """
  email: String!
  """
  The password for the user's account
  """
  password: String!
}

"""
Payload for user registration
"""
type SignUpPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The newly registered user
  """
  user: User!
  """
  Authentication tokens associated with the user session
  """
  tokens: AuthTokens!
}

"""
Input type for user sign-in
"""
input SignInInput {
  """
  The user's email address
  """
  email: String!
  """
  The user's password
  """
  password: String!
}

"""
Payload for signing in
"""
type SignInPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The authenticated user
  """
  user: User!
  """
  Authentication tokens associated with the user session
  """
  tokens: AuthTokens!
}

"""
Payload for deleting a user
"""
type DeleteUserPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The deleted user
  """
  user: User!
}

"""
Input type for creating a meal
"""
input CreateMealInput {
  """
  The date of the meal (formatted as YYYY-MM-DD)
  """
  date: Date!
  """
  A short description of the meal (under 100 characters)
  """
  description: String!
  """
  The location where the meal was consumed
  """
  location: LocationEnum!
  """
  A rating between 1 and 10 assigned to the meal
  """
  rating: Int!
  """
  The type of meal (breakfast, lunch, or dinner)
  """
  type: MealTypeEnum!
  """
  A list of keys referencing the location in an S3 bucket of each photo associated with meal
  """
  photoKeys: [String!]!
}

"""
Payload for creating a meal
"""
type CreateMealPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The newly saved meal
  """
  meal: Meal!
  """
  The created/updated day event
  """
  dayEvent: DayEvent!
}

"""
Input type for updating an existing meal
You must specify at least one updated field
Any combination of the optional fields is acceptable
"""
input UpdateMealInput {
  """
  A new description for the meal (optional)
  """
  description: String
  """
  A new location (optional)
  """
  location: LocationEnum
  """
  A new rating for the meal (optional)
  """
  rating: Int
}

"""
Payload for updating an existing meal
"""
type UpdateMealPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The updated meal
  """
  meal: Meal!
}

"""
Input type for adding a HealthyHabit sticker
"""
input AddStickerInput {
  """
  The date on which the HealthyHabit was performed, formatted as YYYY-MM-DD
  """
  date: Date!
  """
  The HealthyHabit to be added to the list
  """
  healthyHabit: HealthyHabitEnum!
}

"""
Payload for adding a HealthyHabit sticker to a particular day
"""
type AddStickerPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The DayEvent which contains the updated HealthyHabits list
  """
  dayEvent: DayEvent!
}

"""
Input type for removing a HealthyHabit sticker
"""
input RemoveStickerInput {
  """
  The date on which the HealthyHabit was performed, formatted as YYYY-MM-DD
  """
  date: Date!
  """
  The HealthyHabit to be removed from the list
  """
  healthyHabit: HealthyHabitEnum!
}

"""
Payload for removing a HealthyHabit sticker from a particular day
"""
type RemoveStickerPayload implements Payload {
  code: Int!
  success: Boolean!
  message: String!
  """
  The DayEvent which contains the updated HealthyHabits list
  """
  dayEvent: DayEvent!
}
