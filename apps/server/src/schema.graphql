"""
Top level queries
"""
type Query {
  hello: String
  protected: String
  dayEvents(input: DayEventsInput!): [DayEvent!]!
}

"""
Top level mutations
"""
type Mutation {
  signUp(input: SignUpInput!): SignUpPayload
  signIn(input: SignInInput!): SignInPayload
  createMeal(input: CreateMealInput!): CreateMealPayload
}

"""
A day in the calendar
"""
type DayEvent {
  id: ID!
  date: Int!
  healthyHabits: [HealthyHabit!]!
  meals: [Meal!]!
}

"""
A breakfast/lunch/dinner

TODO: add photos: photoUrls: [String!]! <<<<
"""
type Meal {
  id: ID!
  description: String!
  location: Location!
  rating: Int!
  type: MealType!
}

"""
All possible healthy habits
"""
enum HealthyHabit {
  CARDIO
  RESISTANCE_TRAINING
  STUDY
  SLEEP
  MEDITATION
  WATER
  SOCIAL_ACTIVITY
  OFFLINE_MODE
}

"""
All possible locations to eat a meal
"""
enum Location {
  HOME
  WORK
  RESTAURANT
  TRAVEL
  OUTDOORS
  OTHER
}

"""
All recordable mealtimes
"""
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

"""
Input type when fetching day events
"""
input DayEventsInput {
  endDate: Int!
  startDate: Int!
}

"""
Standard interface for all mutation responses.
Operation-specific return data added per type
"""
interface Payload {
  code: String!
  success: Boolean!
  message: String!
}

"""
Represents auth tokens a user must send to
receive authenticated data
"""
type Tokens {
  accessToken: String!
  # refreshToken: String!
}

"""
Represents a user
"""
type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}

"""
Input type when registering a new user
"""
input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

"""
Response type for registering a user
"""
type SignUpPayload implements Payload {
  code: String!
  success: Boolean!
  message: String!
  user: User!
  tokens: Tokens!
}

"""
Input type when signing in
"""
input SignInInput {
  email: String!
  password: String!
}

"""
Response type for signing in
"""
type SignInPayload implements Payload {
  code: String!
  success: Boolean!
  message: String!
  user: User!
  tokens: Tokens!
}

"""
Input type when saving a meal

TODO: photoUrls: [String!]! (flow with S3 probably requires a separate operation) <<<<
"""
input CreateMealInput {
  date: Int!
  description: String!
  location: Location!
  rating: Int!
  type: MealType!
}

"""
Response type for saving a meal

TODO: return updated/newly created dayEvent in order to keep client cache up to date
# dayEvent: DayEvent!

TODO: photoUrls: [String!]! <<<<
"""
type CreateMealPayload implements Payload {
  code: String!
  success: Boolean!
  message: String!
  meal: Meal!
}
